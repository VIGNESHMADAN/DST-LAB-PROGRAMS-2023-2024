class Node:
  def __init__(self,data):
    self.data=data
    self.nref=None
    self.pref=None
class DoublyLinkedList:
  def __init__(self):
    self.head=None
  def print_LinkedList(self):
    if self.head  is None:
      print("the LinkedList is empty!!")
    else:
      n=self.head
      while n.nref is  not  None:
        print(n.data,"-->",end=" ")
        n=n.nref

  def print_LL_reverse(self):
    if  self.head is None:
      print("the Linked list is emmpty!!")
    else:
      n=self.head
      while n.nref is not None:
        n=n.nref
      while  n is not None:
        print(n.data,"-->",end=" ")
        n=n.pref
  def add_begin(self,data):
    new_node=Node(data)
    if self.head is None:
      self.head=new_node
    else:
      new_node.nref=self.head
      self.head.pref=new_node
      self.head=new_node
  def add_end(self,data):
    new_node=Node(data)
    if  self.head is  None:
      self.head=new_node
    else:
      n=self.head
      while n.nref is not None:
        n=n.nref
      n.nref=new_node
      new_node.pref=n
  def  add_after(self,data,x):
      n=self.head
      while n is not None:
        if x==n.data:
          break
        n=n.nref
      if n is None:
        print("Given node is not present in DLL")
      else:
        new_node=Node(data)
        new_node.nref=n.nref
        new_node.pref=n
        if n.nref is not None:
          n.nref.pref=new_node
        n.nref=new_node


  def add_before(self,data,x):
    if self.head is None:
      print(" ll is empty!")
    else:
      n=self.head
      while n is not None:
        if x ==n.data:
          break
        n=n.nref
      if n is None:
        print("the given node is not in LL")
      else:
        new_node=Node(data)
        new_node.nref=n
        new_node.pref=n.pref
        if n.pref is not None:
          n.pref.nref=new_node
        else:
          self.head=new_node
        n.pref=new_node
  def delete_begin(self):
    if self.head is None:
      print("DDL is empty cannot delete!")
      return
    if self.head.nref is None:
      self.head=None
      print("DDL is empty after deleting this Node!")
    else:
      self.head=self.head.nref
      self.head.pref=None
  def delete_end(self):
    if self.head is None:
      print("DDL is empty cannot delete!")
      return
    if self.head.nref is None:
      self.head=None
      print("DDL is empty after deleting this Node!")
    else:
      n=self.head
      while n.nref is not None:
        n=n.nref
      n.pref.nref=None

  def delete_value(self,x):
    if self.head is None:
      print("DDL is empty cannot delete!")
      return
    if self.head.nref is None:
      if x==self.head.data:
        self.head=None
      else:
        print(" x is not in the linked list")
        return
    if self.head.data==x:
      self.head=self.head.nref
      self.head.pref=None
      return
    n=self.head
    while n.nref is not None:
      if x==n.data:
        break
      n=n.nref
    if n.nref is not None:
      n.nref.pref=n.pref
      n.pref.nref=n.nref
    else:
      if n.data==x:
        n.pref.nref=None
      else:
          print("x is not present in DLL")

p11=DoublyLinkedList()
p11.add_begin(2)
p11.add_begin(34)
p11.add_end(44)
p11.add_after(1010,2)
p11.add_before(7,2)
p11.delete_end()
p11.delete_value(44)
p11.print_LinkedList()
p11.print_LL_reverse()
